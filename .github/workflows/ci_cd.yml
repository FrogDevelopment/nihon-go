name: CI/CD

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

env:
  GITHUB_ACTOR: ${{ github.actor }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CI: true

jobs:
  build-libraries:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [ 'ftp-client', 'utils-library' ]
    steps:
      - name: Checkout with all branches and tags
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Cache gradle
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Setup Java 17
        uses: joschi/setup-jdk@v2
        with:
          java-version: '17'
      - name: Compile & Test
        run: ./gradlew libraries:${{ matrix.project }}:test
      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-results_${{ matrix.project }}
          path: libraries/${{ matrix.project }}/build/test-results/**/*.xml

  build-services:
    needs: build-libraries
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        #            'authentication-service',
        project: [
            'nihongo-dico-entries-service',
            'nihongo-dico-sentences-service',
            'nihongo-lessons-service'
        ]
    steps:
      - name: Checkout with all branches and tags
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Cache gradle
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Setup Java 17
        uses: joschi/setup-jdk@v2
        with:
          java-version: '17'
      - name: Compile & Test
        run: ./gradlew services:${{ matrix.project }}:test
      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-results_${{ matrix.project }}
          path: services/${{ matrix.project }}/build/test-results/**/*.xml
      - name: Containerize
        run: ./gradlew services:${{ matrix.project }}:jib -Djib.to.auth.username=${{ secrets.DOCKER_USR }} -Djib.to.auth.password=${{ secrets.DOCKER_PSW }} -Djib.console='plain'

  publish-test-results:
    name: "Publish Unit Tests Results"
    needs: [ build-libraries, build-services ]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: test-results

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          files: test-results/**/*.xml

  clean-up:
    name: "Clean up uploaded artifacts"
    needs: [ publish-test-results ]
    runs-on: ubuntu-latest

    steps:
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            test-results_security-library
            test-results_realm-library
            test-results_authentication-service
            test-results_budget-service
            test-results_core-service
            test-results_notification-service
            test-results_settings-service
            test-results_users-service


  build-front:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [ 'solae-web', 'solae-admin' ]
    steps:
      - name: Checkout with all branches and tags
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Cache gradle
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Install npm
        run: ./gradlew front:${{ matrix.project }}:npmInstall
      - name: Build Docker Image
        run: ./gradlew f:${{ matrix.project }}:buildDockerImage
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USR }}
          password: ${{ secrets.DOCKER_PSW }}
      - name: Push Docker Image
        run: ./gradlew front:${{ matrix.project }}:pushDockerImage
