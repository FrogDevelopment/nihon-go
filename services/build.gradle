plugins {
//    id 'org.sonarqube' version '3.0' apply false
    id 'com.google.cloud.tools.jib' version '2.6.0' apply false
    id 'org.springframework.cloud.contract' version '2.2.4.RELEASE' apply false
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
//    apply plugin: 'org.sonarqube'
    apply plugin: 'com.google.cloud.tools.jib'
    apply plugin: 'org.springframework.cloud.contract'

    sourceCompatibility = JavaVersion.VERSION_14
    targetCompatibility = JavaVersion.VERSION_14

    dependencies {
        def authorizationJwtVersion = '1.2.0'
        def dockerSecretsVersion = '1.0.0'

        annotationProcessor 'org.springframework:spring-context-indexer'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

        implementation "com.frog-development:authorization-jwt-module:$authorizationJwtVersion"
        implementation "com.frog-development:docker-secrets-module:$dockerSecretsVersion"

        implementation 'org.apache.commons:commons-lang3'

        implementation 'org.postgresql:postgresql'
        implementation 'org.hibernate:hibernate-java8'
        implementation 'org.flywaydb:flyway-core'

        implementation 'org.springframework.boot:spring-boot-actuator-autoconfigure'
        implementation 'org.springframework.boot:spring-boot-starter-jdbc'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.cloud:spring-cloud-starter-config'
        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
        implementation 'org.springframework.cloud:spring-cloud-starter-loadbalancer'

        implementation 'com.github.ben-manes.caffeine:caffeine:2.8.5'

        implementation 'org.jolokia:jolokia-core'
        implementation 'net.logstash.logback:logstash-logback-encoder:6.4'

        implementation 'javax.validation:validation-api'
        implementation 'org.apache.commons:commons-lang3'

        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
        testImplementation 'org.springframework.security:spring-security-test'
        testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-verifier'
        testImplementation 'org.testcontainers:postgresql'
        testImplementation 'org.testcontainers:junit-jupiter'

        testRuntime 'org.junit.platform:junit-platform-runner'
        testRuntime 'org.junit.jupiter:junit-jupiter-engine'
    }

    springBoot {
        buildInfo()
    }

    test {
        reports.html.enabled = false

        useJUnitPlatform {
            includeTags 'unitTest'
            includeTags 'integrationTest'
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            xml.destination file("${buildDir}/reports/jacoco/test.xml")
            csv.enabled false
            html.enabled false
        }
    }

    contracts {
        testFramework = 'JUNIT5'
        failOnNoContracts = false
    }

//    sonarqube {
//        properties {
//            property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test.xml"
//            property "sonar.projectKey", "FrogDevelopment_authentication-service"
//            property "sonar.organization", "frogdevelopment"
//            property "sonar.host.url", "https://sonarcloud.io"
//        }
//    }

//    project.tasks['sonarqube'].dependsOn 'jacocoTestReport' fixme

    jib {
        from {
            image = 'frogdevelopment/docker-adoptopenjdk14-curl:latest'
        }
        to {
            afterEvaluate {
                image = "assoplus/${name}"
                tags = [version.toString(), gitBranch()]
            }
        }
        container {
            jvmFlags = ['-Xmx64m']
            volumes = ["/tmp"]
            creationTime = 'USE_CURRENT_TIMESTAMP'
            afterEvaluate {
                labels = [
                        'frog.image_base': jib.from.image,
                        'frog.version'   : version.toString()
                ]
            }
        }
    }
}
